# sklearn es la bibilteca de python de ML
# sci-kit learn

# metricas para calcular la confiabilidad del modelo
from sklearn import metrics

# De los paquetes lineales vamos a usar LogisticRegression
# porque la variable de respuesta es cuantitativa , por eso usamos una regresión lineal
from sklearn.linear_model import LinearRegression


# esto es para cortar el test entre un conjunto de training y de test
from sklearn.model_selection import train_test_split

X = result[['cliente_ingreso_neto', 'cliente_metal', 'cliente_operaciones', 'credito_monto', 'credito_recibo','credito_veraz_score', 'credito_consultas_anuales', 'credito_cantidad_moras']]
y = result['confiabilidad_log']


X = result[['cliente_ingreso_neto', 'cliente_tipo_laboral', 'cliente_metal', 'cliente_operaciones', 'credito_monto', 'credito_recibo','credito_veraz_score', 'credito_consultas_anuales', 'credito_cantidad_moras']]
y = result['confiabilidad_log']


X = result[['cliente_id', 'cliente_edad', 'cliente_ingreso_neto', 'cliente_tipo_laboral', 'cliente_metal', 'cliente_operaciones', 'cliente_refines', 'cliente_peor_atraso_historico', 'cliente_juicios_cancelados', 'cliente_apto_venta_en_caja', 'credito_id', 'credito_monto', 'credito_sucursal', 'credito_recibo', 'credito_clase_plan', 'credito_monto_moras_bcra', 'credito_cantidad_moras_bcra', 'credito_meses_relacion_dependencia', 'credito_veraz_score', 'credito_consultas_anuales', 'credito_consultas_mensuales', 'credito_sector_laboral', 'creditos_ingreso', 'credito_compromiso', 'credito_score', 'credito_max_bcra_24m', 'credito_max_bcra_12m', 'credito_max_bcra_6m', 'credito_cantidad_moras', 'credito_categoria', 'credito_consultas_3m', 'credito_consultas_6m', 'credito_consultas_24m', 'credito_ingreso', 'credito_score_veraz']]
y = result['confiabilidad_log']

# Cortar el dataset en training y test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)


# Entrenamiento
regressor = LinearRegression()
regressor.fit(X_train, y_train)


# To retrieve the intercept:
print(regressor.intercept_)


# Predicción
y_pred = regressor.predict(X_test)


from sklearn.metrics import mean_squared_error, r2_score


# The mean squared error
# la distancia que hay entre lo que predijiste contra lo real ( que debería haber dado )
# error cuadrático medio
print('Mean squared error: %.2f' % mean_squared_error(y_test, y_pred))

# The coefficient of determination: 1 is perfect prediction
# Con cuánta probabilidad tus variables independientes pueden explicar la variabilidad de la variable dependiente
# la precisión del modelo (coeficiente de determinación)
print('Coefficient of determination: %.2f' % r2_score(y_test, y_pred, multioutput='variance_weighted'))


# Agregar todas las variables que tengan varianza, que son las que le dan valor

# Nosotros tuvimos que hacer las conversión de variables cualitativas a cuantitativas porque el modelo de regresión lineal es

# la empresa nos pidió una probabilidad

# nos queda investigar técnicas de regularización
